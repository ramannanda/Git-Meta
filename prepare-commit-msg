#!/bin/sh
#
# prepare-commit-msg
# This hook will extract meta info from the system and push
# it as a comment in the commit
#
#
#
# To enable this hook, rename this file to "prepare-commit-msg".
#

# prepare-commit-msg
# This hook is invoked by git-commit[1] right after preparing the default log message, and before the editor is started.

# It takes one to three parameters.
# The first is the name of the file that contains the commit log message.
# The second is the source of the commit message,
#	and can be: message (if a -m or -F option was given);
#	template (if a -t option was given or the configuration option commit.template is set);
#	merge (if the commit is a merge or a .git/MERGE_MSG file exists);
#	squash (if a .git/SQUASH_MSG file exists);
#	or commit,
# followed by a commit SHA-1 (if a -c, -C or --amend option was given).

# If the exit status is non-zero, git commit will abort.

# The purpose of the hook is to edit the message file in place, and it is not suppressed by the --no-verify option. A non-zero exit means a failure of the hook and aborts the commit. It should not be used as replacement for pre-commit hook.

# The sample prepare-commit-msg hook that comes with Git removes the help message found in the commented portion of the commit template.

#!/bin/bash

# programname=$0

# function usage {
#     echo "usage: $programname [-abch] [-f infile] [-o outfile]"
#     echo "  -a      turn on feature a"
#     echo "  -b      turn on feature b"
#     echo "  -c      turn on feature c"
#     echo "  -h      display help"
#     echo "  -f infile   specify input file infile"
#     echo "  -o outfile  specify output file outfile"
#     exit 1
# }

# usage

push_meta() {
	BUFFER=""
	BREAK="#!â‹®â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯â‹¯\n"

	BRANCH_NAME=$(git branch | grep '*' | sed 's/* //')
	# Don't apply this logic if we are in a 'detached head' state (rebasing, read-only history, etc)
	if [ "$NAME" != "(no branch)" ]; then
	    BUFFER+="#!â‹® ðŸŒ²  | $BRANCH_NAME\n"
	fi

	STATE=$(osascript -e 'tell application "Spotify" to player state as string');
	if [ "$STATE" = "playing" ]; then
	  ARTIST=$(osascript -e 'tell application "Spotify" to artist of current track as string');
	  TRACK=$(osascript -e 'tell application "Spotify" to name of current track as string');
	  BUFFER+="#!â‹® ðŸŽ§  | $ARTIST - $TRACK\n"â‹¯
	fi

	BUFFER="$BREAK$BUFFER"
	BUFFER+="$BREAK"
	local META="$BUFFER"
	echo "$META"
}


if [ $# -eq 0 ]
  then
    echo "No arguments supplied!" && exit 0
fi

echo "$(cat $1)"
echo "$2"
echo "$3"

if [ -z "$2" ]
then
	META="$(push_meta)"
	echo "\n\n$META\n$(cat $1)" > $1 && exit 0
elif [ "$2" == "message" ]
then
	META="$(push_meta)"
	echo "$(cat $1)\n$META" > $1 && exit 0
else
	echo "else"
fi

# # Succeed on all merge messages, as evidenced by MERGE_MSG existing
# [ -f $GIT_DIR/MERGE_MSG ] && exit 0

# #Prevents the branch code from being triggered if any parameter was passed to git commit e.g -m or --amend (if length of parameter 2 is > 0)
# if [ "$2" ]
# then
#     exit
# fi


